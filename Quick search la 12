import React, { useState, useRef } from 'react';
import { QuickSearchItem } from './QuickSearchItem';

interface QuickSearchWrapperProps {
  label: string;
  data: QuickSearchItem[];
  onSelect: (item: QuickSearchItem) => void;
}

const QuickSearchWrapper: React.FC<QuickSearchWrapperProps> = ({ label, data, onSelect }) => {
  const [inputValue, setInputValue] = useState('');
  const [selectedValue, setSelectedValue] = useState('');
  const [showDropdown, setShowDropdown] = useState(false);
  const [hasTyped, setHasTyped] = useState(false);
  const wrapperRef = useRef<HTMLDivElement>(null);

  const filteredData = data.filter((item) =>
    (item.display ?? item.name ?? '')
      .toLowerCase()
      .includes(inputValue.toLowerCase())
  );

  const handleSelect = (item: QuickSearchItem) => {
    const displayText = item.display ?? item.name ?? '';
    setInputValue(displayText);
    setSelectedValue(displayText);
    setShowDropdown(false);
    setHasTyped(false);
    onSelect(item);
  };

  return (
    <div className="relative w-full max-w-md mx-auto" ref={wrapperRef}>
      <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
      <input
        type="text"
        className="w-full border border-gray-300 rounded-md shadow-sm px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        value={inputValue}
        placeholder="Search..."
        onFocus={() => {
          setShowDropdown(true);
          setHasTyped(false);
        }}
        onChange={(e) => {
          setHasTyped(true);
          setInputValue(e.target.value);
          setSelectedValue(e.target.value);
        }}
        onBlur={() => {
          setTimeout(() => {
            setShowDropdown(false);
          }, 100);
        }}
      />
      {showDropdown && (
        <ul className="absolute z-10 mt-1 w-full bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto">
          {filteredData.length > 0 ? (
            filteredData.map((item, index) => (
              <li
                key={index}
                onMouseDown={() => handleSelect(item)}
                className="cursor-pointer px-4 py-2 hover:bg-blue-100"
              >
                {item.display ?? item.name}
              </li>
            ))
          ) : (
            hasTyped && (
              <li className="px-4 py-2 text-gray-500">No results found</li>
            )
          )}
        </ul>
      )}
    </div>
  );
};

export default QuickSearchWrapper;
