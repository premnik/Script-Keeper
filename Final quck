import React, { useEffect, useState } from 'react';
import { clx } from '@/utils/clx';

type QuickSearchWrapperProps<T> = {
  placeholder?: string;
  minLength?: number;
  delay?: number;
  onSearch: (query: string) => Promise<T[]>;
  onSelect: (item: T) => void;
  renderItem: (item: T) => React.ReactNode;
  className?: string;
  selectedValue: string;
  setSelectedValue: (value: string) => void;
};

export function QuickSearchWrapper<T>({
  placeholder = 'Search...',
  minLength = 3,
  delay = 300,
  onSearch,
  onSelect,
  renderItem,
  className = '',
  selectedValue,
  setSelectedValue,
}: QuickSearchWrapperProps<T>) {
  const [inputValue, setInputValue] = useState(selectedValue);
  const [results, setResults] = useState<T[]>([]);
  const [showDropdown, setShowDropdown] = useState(false);

  useEffect(() => {
    if (inputValue.length >= minLength) {
      const handler = setTimeout(async () => {
        const items = await onSearch(inputValue);
        setResults(items);
        setShowDropdown(true);
      }, delay);

      return () => clearTimeout(handler);
    } else {
      setResults([]);
      setShowDropdown(false);
    }
  }, [inputValue, onSearch, minLength, delay]);

  useEffect(() => {
    setInputValue(selectedValue); // sync input with selected value from props
  }, [selectedValue]);

  const handleSelect = (item: T) => {
    const display = (item as any).display || (item as any).name || '';
    setInputValue(display);
    setSelectedValue(display);
    onSelect(item);
    setShowDropdown(false);
  };

  return (
    <div className={`relative w-full ${className}`}>
      <input
        type="text"
        className={clx(
          'px-3 py-2 text-sm leading-6 min-h-10 w-full appearance-none rounded border border-solid bg-white',
          'focus:shadow-input-box-shadow outline-0 disabled:border-gray-200 disabled:bg-gray-100'
        )}
        placeholder={placeholder}
        value={inputValue}
        onChange={(e) => {
          setInputValue(e.target.value);
          setSelectedValue('');
        }}
        onFocus={() => {
          if (inputValue && results.length > 0) {
            setShowDropdown(true);
          }
        }}
        onBlur={() => setTimeout(() => setShowDropdown(false), 150)}
      />

      {showDropdown && results.length > 0 && (
        <ul className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
          {results.map((item, idx) => (
            <li
              key={idx}
              className="px-4 py-2 text-sm cursor-pointer hover:bg-indigo-100"
              onClick={() => handleSelect(item)}
            >
              {renderItem(item)}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
